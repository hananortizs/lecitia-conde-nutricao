// <auto-generated />
using System;
using LeticiaConde.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LeticiaConde.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251003165111_FixDateTimeTimezone")]
    partial class FixDateTimeTimezone
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LeticiaConde.Core.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LeadId")
                        .HasColumnType("integer");

                    b.Property<string>("Observations")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("ReservationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("VirtualRoomLink")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("LeticiaConde.Core.Entities.Lead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Bmi")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("BmiClassification")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CaptureDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("Converted")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Height")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Weight")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("WhatsApp")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("LeticiaConde.Core.Entities.ScheduleConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("DayName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("interval");

                    b.Property<string>("Observations")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("Sabbath")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("ScheduleConfigurations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            DayName = "Sunday",
                            DayOfWeek = 0,
                            Observations = "Open hours",
                            Sabbath = false
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            DayName = "Monday",
                            DayOfWeek = 1,
                            EndTime = new TimeSpan(0, 22, 0, 0, 0),
                            Sabbath = false,
                            StartTime = new TimeSpan(0, 17, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            DayName = "Tuesday",
                            DayOfWeek = 2,
                            EndTime = new TimeSpan(0, 22, 0, 0, 0),
                            Sabbath = false,
                            StartTime = new TimeSpan(0, 17, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            DayName = "Wednesday",
                            DayOfWeek = 3,
                            EndTime = new TimeSpan(0, 22, 0, 0, 0),
                            Sabbath = false,
                            StartTime = new TimeSpan(0, 17, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            DayName = "Thursday",
                            DayOfWeek = 4,
                            EndTime = new TimeSpan(0, 22, 0, 0, 0),
                            Sabbath = false,
                            StartTime = new TimeSpan(0, 17, 0, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            Active = false,
                            DayName = "Friday",
                            DayOfWeek = 5,
                            Observations = "Blocked - Sabbath",
                            Sabbath = true
                        },
                        new
                        {
                            Id = 7,
                            Active = false,
                            DayName = "Saturday",
                            DayOfWeek = 6,
                            Observations = "Blocked - Sabbath",
                            Sabbath = true
                        });
                });

            modelBuilder.Entity("LeticiaConde.Core.Entities.Appointment", b =>
                {
                    b.HasOne("LeticiaConde.Core.Entities.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lead");
                });
#pragma warning restore 612, 618
        }
    }
}
